from .system import now

c"""source-before-namespace
#include <ctime>
"""

def _pad(value: string, width: i64) -> string:
    for _ in range(width - i64(len(value))):
        value = "0" + value

    return value

class TimeError(Error):
    message: string

class Time:
    """Time in seconds and nanoseconds.

    """

    seconds: i64
    nanoseconds: i32

    def __iadd__(self, other: Time):
        self.seconds += other.seconds
        self.nanoseconds += other.nanoseconds

        if self.nanoseconds >= 1_000_000_000:
            self.seconds += 1
            self.nanoseconds -= 1_000_000_000

    def __isub__(self, other: Time):
        self.seconds -= other.seconds
        self.nanoseconds -= other.nanoseconds

        if self.nanoseconds < 0:
            self.seconds -= 1
            self.nanoseconds += 1_000_000_000

    def __add__(self, seconds: i64) -> Time:
        time = Time(seconds, 0)
        time += self

        return time

    def __sub__(self, seconds: i64) -> Time:
        return self + -seconds

class LocalDateTime:
    """Date and time in the local time zone.

    """

    year: i32
    month: u8
    day: u8
    hour: u8
    minute: u8
    second: u8
    is_daylight_saving_time: bool

    def __init__(self, time_since_epoch: Time = None):
        """Create a local date time object from given time since epoch. Uses
        current system time if time_since_epoch is None.

        """

        ok = False

        c"""
        std::time_t t;
        std::tm *tm_p;

        if (time_since_epoch) {
            t = time_since_epoch->seconds;
        } else {
            std::time(&t);
        }

        tm_p = std::localtime(&t);

        if (tm_p != NULL) {
            year = 1900 + tm_p->tm_year;
            month = tm_p->tm_mon + 1;
            day = tm_p->tm_mday;
            hour = tm_p->tm_hour;
            minute = tm_p->tm_min;
            second = tm_p->tm_sec;
            is_daylight_saving_time = tm_p->tm_isdst == 0 ? false : true;
            ok = true;
        }
        """

        if not ok:
            raise TimeError("Time convertion failed.")

    def to_time_since_epoch(self) -> Time:
        """Return this date and time as time since epoch.

        """

        ok = False
        time = Time(0, 0)

        c"""
        struct tm tm;
        tm.tm_year = year - 1900;
        tm.tm_mon = month - 1;
        tm.tm_mday = day;
        tm.tm_hour = hour;
        tm.tm_min = minute;
        tm.tm_sec = second;
        tm.tm_isdst = is_daylight_saving_time;

        time_t t = std::mktime(&tm);

        if (t != -1) {
            time->seconds = t;
            ok = true;
        }
        """

        if not ok:
            raise TimeError("Time convertion failed.")

        return time

    def __str__(self) -> string:
        year = _pad(str(self.year), 4)
        month = _pad(str(self.month), 2)
        day = _pad(str(self.day), 2)
        hour = _pad(str(self.hour), 2)
        minute = _pad(str(self.minute), 2)
        second = _pad(str(self.second), 2)

        return (f"{year}-{month}-{day} {hour}:{minute}:{second}")

class UtcDateTime:
    """Date and time in UTC.

    """

    year: i32
    month: u8
    day: u8
    hour: u8
    minute: u8
    second: u8

    def __init__(self, time_since_epoch: Time = None):
        """Create a UTC date time object from given time since epoch. Uses
        current system time if time_since_epoch is None.

        """

        ok = False

        c"""
        std::time_t t;
        std::tm *tm_p;

        if (time_since_epoch) {
            t = time_since_epoch->seconds;
        } else {
            std::time(&t);
        }

        tm_p = std::gmtime(&t);

        if (tm_p != NULL) {
            year = 1900 + tm_p->tm_year;
            month = tm_p->tm_mon + 1;
            day = tm_p->tm_mday;
            hour = tm_p->tm_hour;
            minute = tm_p->tm_min;
            second = tm_p->tm_sec;
            ok = true;
        }
        """

        if not ok:
            raise TimeError("Time convertion failed.")

    def to_time_since_epoch(self) -> Time:
        """Return this date and time as time since epoch.

        """

        ok = False
        time = Time(0, 0)

        c"""
        struct tm tm;
        tm.tm_year = year - 1900;
        tm.tm_mon = month - 1;
        tm.tm_mday = day;
        tm.tm_hour = hour;
        tm.tm_min = minute;
        tm.tm_sec = second;

        time_t t = timegm(&tm);

        if (t != -1) {
            time->seconds = t;
            ok = true;
        }
        """

        if not ok:
            raise TimeError("Time convertion failed.")

        return time

    def __str__(self) -> string:
        year = _pad(str(self.year), 4)
        month = _pad(str(self.month), 2)
        day = _pad(str(self.day), 2)
        hour = _pad(str(self.hour), 2)
        minute = _pad(str(self.minute), 2)
        second = _pad(str(self.second), 2)

        return (f"{year}-{month}-{day} {hour}:{minute}:{second} UTC")

@test
def test_time():
    time = Time(5, 1)
    assert time.seconds == 5
    assert time.nanoseconds == 1

@test
def test_utc_date_time_from_time_since_epoch():
    datetime = UtcDateTime(Time(0, 0))
    assert datetime.year == 1970
    assert datetime.month == 1
    assert datetime.day == 1
    assert datetime.hour == 0
    assert datetime.minute == 0
    assert datetime.second == 0

@test
def test_utc_date_time_from_time():
    datetime = UtcDateTime(Time(1615130879, 0))
    assert datetime.year == 2021
    assert datetime.month == 3
    assert datetime.day == 7
    assert datetime.hour == 15
    assert datetime.minute == 27
    assert datetime.second == 59

    time = datetime.to_time_since_epoch()
    assert time.seconds == 1615130879
    assert time.nanoseconds == 0

@test
def test_utc_date_time_now():
    time = UtcDateTime().to_time_since_epoch()
    assert time.seconds > now().seconds - 3600
    assert time.seconds < now().seconds + 3600

@test
def test_local_date_time_from_time():
    datetime = LocalDateTime(Time(1615130879, 0))
    assert datetime.year == 2021
    assert datetime.month == 3
    assert datetime.minute == 27
    assert datetime.second == 59

    time = datetime.to_time_since_epoch()
    assert time.seconds == 1615130879
    assert time.nanoseconds == 0

@test
def test_local_date_time_now():
    time = LocalDateTime().to_time_since_epoch()
    assert time.seconds > now().seconds - 3600
    assert time.seconds < now().seconds + 3600

@test
def test_add_times():
    t = Time(10, 0)

    t += Time(1, 0)
    assert t.seconds == 11
    assert t.nanoseconds == 0

    t += Time(0, 1_000_000)
    assert t.seconds == 11
    assert t.nanoseconds == 1_000_000

    t += Time(0, 999_000_001)
    assert t.seconds == 12
    assert t.nanoseconds == 1

@test
def test_subtract_times():
    t = Time(10, 0)

    t -= Time(1, 0)
    assert t.seconds == 9
    assert t.nanoseconds == 0

    t -= Time(0, 1_000_000)
    assert t.seconds == 8
    assert t.nanoseconds == 999_000_000

    t -= Time(0, 999_000_001)
    assert t.seconds == 7
    assert t.nanoseconds == 999_999_999

@test
def test_local_date_time_string():
    assert str(LocalDateTime(Time(1615130879, 0))).starts_with("2021-03-0")
    assert str(LocalDateTime(Time(1615130879, 0))).ends_with(":27:59")

@test
def test_utc_date_time_string():
    assert str(UtcDateTime(Time(1615130879, 0))) == "2021-03-07 15:27:59 UTC"
